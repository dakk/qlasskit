{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exporting to other frameworks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Qlasskit implements circuit / gate exporters for Qiskit, Cirq, Qasm, Sympy and Pennylane. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qlasskit import Qint, qlassf\n",
    "\n",
    "\n",
    "@qlassf\n",
    "def hello_world(a: bool, b: Qint[2]) -> Qint[2]:\n",
    "    return b + (1 if a else 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Qiskit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 454.719x451.5 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = hello_world.export(\"qiskit\")\n",
    "qc.draw(\"mpl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## QASM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OPENQASM 3.0;\n",
      "\n",
      "gate hello_world a b.0 b.1 _ret.0 _ret.1 {\n",
      "\tcx a _ret.0\n",
      "\tcx b.0 _ret.0\n",
      "\tcx b.1 _ret.1\n",
      "\tccx a b.0 _ret.1\n",
      "}\n",
      "\n",
      "hello_world q[0],q[1],q[2],q[3],q[4];\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qc = hello_world.export(\"qasm\")\n",
    "print(qc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cirq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"overflow: auto; white-space: pre;\">0: ───hello_world───\n",
       "      │\n",
       "1: ───hello_world───\n",
       "      │\n",
       "2: ───hello_world───\n",
       "      │\n",
       "3: ───hello_world───\n",
       "      │\n",
       "4: ───hello_world───</pre>"
      ],
      "text/plain": [
       "0: ───hello_world───\n",
       "      │\n",
       "1: ───hello_world───\n",
       "      │\n",
       "2: ───hello_world───\n",
       "      │\n",
       "3: ───hello_world───\n",
       "      │\n",
       "4: ───hello_world───"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cirq\n",
    "\n",
    "qc = hello_world.export(\"cirq\")\n",
    "qc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pennylane"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<QuantumTape: wires=[0, 3, 1, 2, 4], params=0>"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pennylane as qml\n",
    "\n",
    "tape = hello_world.export(\"pennylane\")\n",
    "tape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sympy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$\\displaystyle C_{0,1}{\\left(X_{4}\\right)} \\text{CNOT}_{2,4} \\text{CNOT}_{1,3} \\text{CNOT}_{0,3} {\\left|00000\\right\\rangle }$"
      ],
      "text/plain": [
       "C((0,1),X(4))*CNOT(2,4)*CNOT(1,3)*CNOT(0,3)*|00000>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qc = hello_world.export(\"sympy\")\n",
    "qc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Qutip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Disabled on docs for a depencency problem\n",
    "# qc = hello_world.export(\"qutip\")\n",
    "# qc.gates"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "qlasskit_310-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
